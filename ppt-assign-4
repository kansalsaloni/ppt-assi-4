Q=> Given three integer arrays arr1, arr2 and arr3 sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.
Sol=>
#include <bits/stdc++.h>

std::vector<int> findCommonElements(std::vector<int>& arr1, std::vector<int>& arr2, std::vector<int>& arr3) {
    std::vector<int> result;
    int ptr1 = 0, ptr2 = 0, ptr3 = 0;

    while (ptr1 < arr1.size() && ptr2 < arr2.size() && ptr3 < arr3.size()) {
        if (arr1[ptr1] == arr2[ptr2] && arr2[ptr2] == arr3[ptr3]) {
            result.push_back(arr1[ptr1]);
            ++ptr1;
            ++ptr2;
            ++ptr3;
        } else if (arr1[ptr1] < arr2[ptr2]) {
            ++ptr1;
        } else if (arr2[ptr2] < arr3[ptr3]) {
            ++ptr2;
        } else {
            ++ptr3;
        }
    }

    return result;
}

int main() {
    int n1, n2, n3;
    std::cout << "Enter the length of the first array: ";
    std::cin >> n1;

    std::cout << "Enter the elements of the first array (sorted): ";
    std::vector<int> arr1(n1);
    for (int i = 0; i < n1; ++i) {
        std::cin >> arr1[i];
    }

    std::cout << "Enter the length of the second array: ";
    std::cin >> n2;

    std::cout << "Enter the elements of the second array (sorted): ";
    std::vector<int> arr2(n2);
    for (int i = 0; i < n2; ++i) {
        std::cin >> arr2[i];
    }

    std::cout << "Enter the length of the third array: ";
    std::cin >> n3;

    std::cout << "Enter the elements of the third array (sorted): ";
    std::vector<int> arr3(n3);
    for (int i = 0; i < n3; ++i) {
        std::cin >> arr3[i];
    }

    std::vector<int> commonElements = findCommonElements(arr1, arr2, arr3);

    std::cout << "

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
#####################################################################################################################
Q=>Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

Sol=>#include <iostream>
#include <vector>
#include <unordered_set>

std::vector<std::vector<int>> findDistinctElements(const std::vector<int>& nums1, const std::vector<int>& nums2) {
    std::unordered_set<int> set1(nums1.begin(), nums1.end());
    std::unordered_set<int> set2(nums2.begin(), nums2.end());

    std::vector<int> notInNums2;
    std::vector<int> notInNums1;

    for (int num : set1) {
        if (set2.find(num) == set2.end()) {
            notInNums2.push_back(num);
        }
    }

    for (int num : set2) {
        if (set1.find(num) == set1.end()) {
            notInNums1.push_back(num);
        }
    }

    return {notInNums1, notInNums2};
}

int main() {
    int n1, n2;

    std::cout << "Enter the length of nums1: ";
    std::cin >> n1;
    std::vector<int> nums1(n1);

    std::cout << "Enter the elements of nums1: ";
    for (int i = 0; i < n1; ++i) {
        std::cin >> nums1[i];
    }

    std::cout << "Enter the length of nums2: ";
    std::cin >> n2;
    std::vector<int> nums2(n2);

    std::cout << "Enter the elements of nums2: ";
    for (int i = 0; i < n2; ++i) {
        std::cin >> nums2[i];
    }

    std::vector<std::vector<int>> distinctElements = findDistinctElements(nums1, nums2);

    std::cout << "Distinct elements not present in nums2: ";
    for (int num : distinctElements[0]) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    std::cout << "Distinct elements not present in nums1: ";
    for (int num : distinctElements[1]) {
        std::cout << num << " ";
    }
    std::cout << std::endl;

    return 0;
}



**Input:** nums1 = [1,2,3], nums2 = [2,4,6]
**Output:** [[1,3],[4,6]]
#####################################################################################################################
Q=> Given a 2D integer array matrix, return *the **transpose** of* matrix.
The **transpose** of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.

Sol=>
#include <iostream>
#include <vector>

std::vector<std::vector<int>> transposeMatrix(const std::vector<std::vector<int>>& matrix) {
    int rows = matrix.size();
    int cols = matrix[0].size();

    std::vector<std::vector<int>> transposed(cols, std::vector<int>(rows));

    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            transposed[j][i] = matrix[i][j];
        }
    }

    return transposed;
}

int main() {
    int rows, cols;
    std::cout << "Enter the number of rows in the matrix: ";
    std::cin >> rows;

    std::cout << "Enter the number of columns in the matrix: ";
    std::cin >> cols;

    std::vector<std::vector<int>> matrix(rows, std::vector<int>(cols));

    std::cout << "Enter the elements of the matrix:\n";
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            std::cin >> matrix[i][j];
        }
    }

    std::vector<std::vector<int>> transposed = transposeMatrix(matrix);

    std::cout << "The transpose of the matrix is:\n";
    for (int i = 0; i < transposed.size(); ++i) {
        for (int j = 0; j < transposed[0].size(); ++j) {
            std::cout << transposed[i][j] << " ";
        }
        std::cout << "\n";
    }

    return 0;
}


Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]
#####################################################################################################################
Q=>Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) 
such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.
Sol=>
#include <iostream>
#include <vector>
#include <algorithm>

int arrayPairSum(const std::vector<int>& nums) {
    int maxSum = 0;
    std::vector<int> sortedNums = nums;

    std::sort(sortedNums.begin(), sortedNums.end());

    for (int i = 0; i < sortedNums.size(); i += 2) {
        maxSum += sortedNums[i];
    }

    return maxSum;
}

int main() {
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;

    std::vector<int> nums(2 * n);
    std::cout << "Enter the elements of the array: ";
    for (int i = 0; i < 2 * n; ++i) {
        std::cin >> nums[i];
    }

    int maxSum = arrayPairSum(nums);

    std::cout << "The maximized sum of the minimum elements in each pair is: " << maxSum << std::endl;

    return 0;
}


Input: nums = [1,4,3,2]
Output: 4
#####################################################################################################################
Q=> You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.
Given the integer n, return *the number of **complete rows** of the staircase you will build*.
Sol=>
#include <iostream>

int arrangeCoins(int n) {
    long left = 0;
    long right = n;

    while (left <= right) {
        long middle = left + (right - left) / 2;
        long sum = (middle * (middle + 1)) / 2;

        if (sum <= n) {
            left = middle + 1;
        } else {
            right = middle - 1;
        }
    }

    return left - 1;
}

int main() {
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;

    int completeRows = arrangeCoins(n);

    std::cout << "The number of complete rows in the staircase is: " << completeRows << std::endl;

    return 0;
}


Input:** n = 5
Output:** 2
#####################################################################################################################
Q=>Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
Sol=>
#include <iostream>
#include <vector>
#include <algorithm>

std::vector<int> sortedSquares(const std::vector<int>& nums) {
    int n = nums.size();
    std::vector<int> result(n);

    int left = 0;
    int right = n - 1;

    for (int i = n - 1; i >= 0; --i) {
        if (abs(nums[left]) > abs(nums[right])) {
            result[i] = nums[left] * nums[left];
            ++left;
        } else {
            result[i] = nums[right] * nums[right];
            --right;
        }
    }

    return result;
}

int main() {
    int n;
    std::cout << "Enter the size of the array: ";
    std::cin >> n;

    std::vector<int> nums(n);
    std::cout << "Enter the elements of the array in non-decreasing order: ";
    for (int i = 0; i < n; ++i) {
        std::cin >> nums[i];
    }

    std::vector<int> sortedSquaresArray = sortedSquares(nums);

    std::cout << "The array of squares sorted in non-decreasing order is: ";
    for (int i = 0; i < n; ++i) {
        std::cout << sortedSquaresArray[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}



Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100] 
#####################################################################################################################
Q=>You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.
Sol=>
#include <iostream>
#include <vector>
#include <algorithm>

int maxCount(int m, int n, const std::vector<std::vector<int>>& ops) {
    int minAi = m;
    int minBi = n;

    for (const auto& op : ops) {
        minAi = std::min(minAi, op[0]);
        minBi = std::min(minBi, op[1]);
    }

    return minAi * minBi;
}

int main() {
    int m, n;
    std::cout << "Enter the number of rows (m): ";
    std::cin >> m;
    std::cout << "Enter the number of columns (n): ";
    std::cin >> n;

    int numOps;
    std::cout << "Enter the number of operations: ";
    std::cin >> numOps;

    std::vector<std::vector<int>> ops(numOps, std::vector<int>(2));
    std::cout << "Enter the operations in the format ai bi: ";
    for (int i = 0; i < numOps; ++i) {
        std::cin >> ops[i][0] >> ops[i][1];
    }

    int maxVal = maxCount(m, n, ops);

    std::cout << "The maximum value in the resulting matrix is: " << maxVal << std::endl;

    return 0;
}

Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output:4
#####################################################################################################################
Q=>Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].
Sol=>

#include <iostream>
#include <vector>

std::vector<int> rearrangeArray(const std::vector<int>& nums) {
    int n = nums.size() / 2;
    std::vector<int> result(nums.size());

    int i = 0;
    int j = n;

    for (int k = 0; k < nums.size(); k += 2) {
        result[k] = nums[i];
        result[k + 1] = nums[j];
        ++i;
        ++j;
    }

    return result;
}

int main() {
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;

    std::vector<int> nums(2 * n);
    std::cout << "Enter the elements of the array: ";
    for (int i = 0; i < 2 * n; ++i) {
        std::cin >> nums[i];
    }

    std::vector<int> rearrangedArray = rearrangeArray(nums);

    std::cout << "The rearranged array is: ";
    for (int i = 0; i < 2 * n; ++i) {
        std::cout << rearrangedArray[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}


Input: nums = [2,5,1,3,4,7], n = 3
Output:[2,3,5,4,1,7]
